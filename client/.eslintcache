[{"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\index.tsx":"1","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\reportWebVitals.ts":"2","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\apollo_provider.tsx":"3","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\App.tsx":"4","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\utils\\routeNames.ts":"5","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\navbar.tsx":"6","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\routing.tsx":"7","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\pages\\home.tsx":"8","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\pages\\login.tsx":"9","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\pages\\register.tsx":"10","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\utils\\useForm.ts":"11","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\utils\\alert-severity.ts":"12","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\context\\user_context.ts":"13","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\authroute.tsx":"14","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\create_post.tsx":"15","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\utils\\upload_pic.ts":"16","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\utils\\compress_image.ts":"17","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\post_component.tsx":"18","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\pages\\profile.tsx":"19","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\gallery.tsx":"20","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\pages\\user_profile.tsx":"21","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\like.tsx":"22","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\comment.tsx":"23","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\comments.tsx":"24","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\myprofileroute.tsx":"25"},{"size":563,"mtime":1609693229527,"results":"26","hashOfConfig":"27"},{"size":425,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":864,"mtime":1609845104387,"results":"29","hashOfConfig":"27"},{"size":1964,"mtime":1611416690405,"results":"30","hashOfConfig":"27"},{"size":210,"mtime":1610024458808,"results":"31","hashOfConfig":"27"},{"size":2345,"mtime":1611404858925,"results":"32","hashOfConfig":"27"},{"size":1001,"mtime":1610740784609,"results":"33","hashOfConfig":"27"},{"size":1300,"mtime":1611398649142,"results":"34","hashOfConfig":"27"},{"size":3419,"mtime":1611404239629,"results":"35","hashOfConfig":"27"},{"size":4453,"mtime":1610630897430,"results":"36","hashOfConfig":"27"},{"size":549,"mtime":1609765287540,"results":"37","hashOfConfig":"27"},{"size":144,"mtime":1609765278493,"results":"38","hashOfConfig":"27"},{"size":912,"mtime":1611422906024,"results":"39","hashOfConfig":"27"},{"size":577,"mtime":1611405288911,"results":"40","hashOfConfig":"27"},{"size":5258,"mtime":1611645434456,"results":"41","hashOfConfig":"27"},{"size":603,"mtime":1611420672443,"results":"42","hashOfConfig":"27"},{"size":446,"mtime":1609835676516,"results":"43","hashOfConfig":"27"},{"size":4047,"mtime":1611424850418,"results":"44","hashOfConfig":"27"},{"size":3643,"mtime":1611422762851,"results":"45","hashOfConfig":"27"},{"size":2274,"mtime":1610656283960,"results":"46","hashOfConfig":"27"},{"size":2022,"mtime":1611648919678,"results":"47","hashOfConfig":"27"},{"size":1507,"mtime":1610630940724,"results":"48","hashOfConfig":"27"},{"size":1440,"mtime":1611648644420,"results":"49","hashOfConfig":"27"},{"size":1635,"mtime":1610738154605,"results":"50","hashOfConfig":"27"},{"size":672,"mtime":1610741586358,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},"rnef62",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"55"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"55"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"55"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"55"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"55"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"55"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"55"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"55"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\index.tsx",["112"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport MyApolloProvider from './apollo_provider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyApolloProvider />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["113","114"],"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\reportWebVitals.ts",[],"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\apollo_provider.tsx",[],"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\App.tsx",[],"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\utils\\routeNames.ts",[],"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\navbar.tsx",["115","116"],"import {\r\n  AppBar,\r\n  Box,\r\n  Button,\r\n  IconButton,\r\n  makeStyles,\r\n  Toolbar,\r\n} from '@material-ui/core';\r\nimport React, { useContext, useState } from 'react';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport routeNames from '../utils/routeNames';\r\nimport UserContext from '../context/user_context';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst Navbar = () => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState(0);\r\n  const context = useContext(UserContext);\r\n  const history = useHistory();\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const logoutButtonClick = () => {\r\n    context?.logout();\r\n    history.push(routeNames.login);\r\n  };\r\n\r\n  return (\r\n    <AppBar position='static'>\r\n      <Toolbar>\r\n        <IconButton\r\n          edge='start'\r\n          className={classes.menuButton}\r\n          color='inherit'\r\n          aria-label='menu'\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Box className={classes.title}>\r\n          <Button\r\n            component={Link}\r\n            to={routeNames.home}\r\n            style={{ color: 'white' }}\r\n          >\r\n            {context?.user ? context?.user?.userName : 'Home'}\r\n          </Button>\r\n        </Box>\r\n\r\n        {context?.user ? (\r\n          <>\r\n            <Button component={Link} to={routeNames.myprofile} color='inherit'>\r\n              My Profile\r\n            </Button>\r\n            <Button component={Link} to={routeNames.createPost} color='inherit'>\r\n              CreatePost\r\n            </Button>\r\n            <Button onClick={logoutButtonClick} color='inherit'>\r\n              Logout\r\n            </Button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Button component={Link} to={routeNames.login} color='inherit'>\r\n              Login\r\n            </Button>\r\n            <Button component={Link} to={routeNames.register} color='inherit'>\r\n              Register\r\n            </Button>\r\n          </>\r\n        )}\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n\r\n","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\routing.tsx",[],"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\pages\\home.tsx",["117"],"import React from 'react';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport PostComponent from '../components/post_component';\r\nimport IPost from '../interfaces/post_interface';\r\n\r\nconst FETCH_POST_QUERY = gql`\r\n  {\r\n    getPosts {\r\n      id\r\n      description\r\n      picUrl\r\n      createdAt\r\n      userEmail\r\n      likeCount\r\n      likes {\r\n        id\r\n        userEmail\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        userName\r\n        userEmail\r\n        createdAt\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst FETCH_USER_DATA = gql`\r\n  query getUser($id: String!) {\r\n    getUser(id: $id) {\r\n      userName\r\n      email\r\n      picUrl\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nconst Home = () => {\r\n  const { loading, data: { getPosts: posts } = {} } = useQuery(\r\n    FETCH_POST_QUERY\r\n  );\r\n\r\n  return (\r\n    <Grid container direction='column' justify='center' alignItems='center'>\r\n      {loading ? (\r\n        <Typography variant='h5'>Loading posts</Typography>\r\n      ) : (\r\n        posts &&\r\n        posts.map((post: IPost) => (\r\n          <Grid item key={post.id}>\r\n            <PostComponent post={post} />\r\n          </Grid>\r\n        ))\r\n      )}\r\n      <Grid item></Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\pages\\login.tsx",["118"],"import { gql, useMutation } from '@apollo/client';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { useContext, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport UserContext from '../context/user_context';\r\nimport AlertSeverity from '../utils/alert-severity';\r\nimport routeNames from '../utils/routeNames';\r\nimport useForm from '../utils/useForm';\r\n\r\nconst LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      id\r\n      email\r\n      userName\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nconst Login = () => {\r\n  const [errors, setErrors] = useState<any>({});\r\n  const context = useContext(UserContext);\r\n\r\n  const initialState = {\r\n    email: '',\r\n    password: '',\r\n  };\r\n\r\n  const { values, onSubmit, onChange } = useForm(\r\n    loginUserCallback,\r\n    initialState\r\n  );\r\n\r\n  const history = useHistory();\r\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\r\n    update(_, { data: { login: userData } }) {\r\n      console.log('Login result', userData);\r\n      context?.login(userData);\r\n      history.push(routeNames.home);\r\n    },\r\n    onError(err) {\r\n      const errorData = err.graphQLErrors[0]?.extensions?.exception?.errors;\r\n      console.log('ErrorData', errorData);\r\n      let errorMsg = '';\r\n      for (const oneError in errorData) {\r\n        errorMsg += errorData[oneError] + '\\n';\r\n      }\r\n\r\n      context?.setAlert({\r\n        message: errorMsg,\r\n        severity: AlertSeverity.error,\r\n      });\r\n      setErrors(errorData || {});\r\n    },\r\n    variables: values,\r\n  });\r\n\r\n  function loginUserCallback() {\r\n    loginUser();\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      alignItems='center'\r\n      justify='center'\r\n      style={{ marginTop: '100px' }}\r\n    >\r\n      <Card variant='outlined' style={{ width: '400px' }}>\r\n        <CardContent>\r\n          <Typography align='center' variant='h2'>\r\n            GraphQL App\r\n          </Typography>\r\n          <form onSubmit={onSubmit}>\r\n            <Box margin='10px'>\r\n              <TextField\r\n                fullWidth\r\n                type='text'\r\n                name='email'\r\n                label='email'\r\n                value={values.email}\r\n                variant='outlined'\r\n                onChange={onChange}\r\n                error={errors.email ? true : false}\r\n              />\r\n            </Box>\r\n            <Box margin='10px'>\r\n              <TextField\r\n                fullWidth\r\n                type='password'\r\n                name='password'\r\n                label='password'\r\n                value={values.password}\r\n                variant='outlined'\r\n                onChange={onChange}\r\n                error={errors.password ? true : false}\r\n              />\r\n            </Box>\r\n            <Box margin='10px' marginTop='20px'>\r\n              <Button fullWidth variant='outlined' type='submit'>\r\n                <Typography>Login</Typography>\r\n              </Button>\r\n            </Box>\r\n          </form>\r\n          <Link to={routeNames.register}>\r\n            <Typography style={{ color: 'black' }} variant='h5' align='center'>\r\n              Dont have an account ?\r\n            </Typography>\r\n          </Link>\r\n        </CardContent>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\pages\\register.tsx",["119"],"import { gql, useMutation } from '@apollo/client';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { useContext, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport UserContext from '../context/user_context';\r\nimport AlertSeverity from '../utils/alert-severity';\r\nimport routeNames from '../utils/routeNames';\r\nimport useForm from '../utils/useForm';\r\n\r\nconst REGISTER_USER = gql`\r\n  mutation register(\r\n    $userName: String!\r\n    $email: String!\r\n    $password: String!\r\n    $confirmPassword: String!\r\n  ) {\r\n    register(\r\n      registerInput: {\r\n        userName: $userName\r\n        email: $email\r\n        password: $password\r\n        confirmPassword: $confirmPassword\r\n      }\r\n    ) {\r\n      id\r\n      email\r\n      userName\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nconst Register = () => {\r\n  const [errors, setErrors] = useState<any>({});\r\n  const context = useContext(UserContext);\r\n  const history = useHistory();\r\n  const initialState = {\r\n    userName: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n  };\r\n\r\n  const { values, onSubmit, onChange } = useForm(\r\n    registerUserCallback,\r\n    initialState\r\n  );\r\n\r\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\r\n    update(_, { data: { register: userData } }) {\r\n      context?.login(userData);\r\n      history.push(routeNames.home);\r\n    },\r\n    onError(err) {\r\n      const errorData = err.graphQLErrors[0]?.extensions?.exception?.errors;\r\n      console.log('SignUp Error', errorData);\r\n      let errorMsg = '';\r\n      for (const oneError in errorData) {\r\n        errorMsg += errorData[oneError] + '\\n';\r\n      }\r\n      context?.setAlert({\r\n        message: errorMsg,\r\n        severity: AlertSeverity.error,\r\n      });\r\n      setErrors(errorData || {});\r\n    },\r\n    variables: values,\r\n  });\r\n\r\n  function registerUserCallback() {\r\n    addUser();\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      alignItems='center'\r\n      justify='center'\r\n      style={{ marginTop: '100px' }}\r\n    >\r\n      <Card variant='outlined' style={{ width: '400px' }}>\r\n        <CardContent>\r\n          <Typography align='center' variant='h2'>\r\n            GraphQL App\r\n          </Typography>\r\n          <form onSubmit={onSubmit}>\r\n            <Box margin='10px'>\r\n              <TextField\r\n                fullWidth\r\n                type='text'\r\n                name='userName'\r\n                label='userName'\r\n                value={values.userName}\r\n                variant='outlined'\r\n                onChange={onChange}\r\n                error={errors.userName ? true : false}\r\n              />\r\n            </Box>\r\n\r\n            <Box margin='10px'>\r\n              <TextField\r\n                fullWidth\r\n                type='text'\r\n                name='email'\r\n                label='email'\r\n                value={values.email}\r\n                variant='outlined'\r\n                onChange={onChange}\r\n                error={errors.email ? true : false}\r\n              />\r\n            </Box>\r\n            <Box margin='10px'>\r\n              <TextField\r\n                fullWidth\r\n                type='password'\r\n                name='password'\r\n                label='password'\r\n                value={values.password}\r\n                variant='outlined'\r\n                onChange={onChange}\r\n                error={errors.password ? true : false}\r\n              />\r\n            </Box>\r\n            <Box margin='10px'>\r\n              <TextField\r\n                fullWidth\r\n                type='password'\r\n                name='confirmPassword'\r\n                label='confirmPassword'\r\n                value={values.confirmPassword}\r\n                variant='outlined'\r\n                onChange={onChange}\r\n                error={errors.confirmPassword ? true : false}\r\n              />\r\n            </Box>\r\n            <Box margin='10px' marginTop='20px'>\r\n              <Button fullWidth variant='outlined' type='submit'>\r\n                <Typography>SignUp</Typography>\r\n              </Button>\r\n            </Box>\r\n          </form>\r\n          <Link to={routeNames.login}>\r\n            <Typography style={{ color: 'black' }} variant='h5' align='center'>\r\n              Already have an account ?\r\n            </Typography>\r\n          </Link>\r\n        </CardContent>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\utils\\useForm.ts",[],"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\utils\\alert-severity.ts",[],"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\context\\user_context.ts",["120"],"import { createContext, useReducer } from 'react';\r\nimport IUser from '../interfaces/user_interface';\r\ninterface IUserContext {\r\n  token?: string;\r\n  user: IUser | null;\r\n  login: (userData: any) => void;\r\n  logout: () => void;\r\n  updateUser: (userData: IUser) => void;\r\n\r\n  setAlert: (\r\n    value: React.SetStateAction<{\r\n      message: string;\r\n      severity: string;\r\n    }>\r\n  ) => void;\r\n}\r\n\r\nexport const authReducer = (state: any, action: any) => {\r\n  switch (action.type) {\r\n    case 'LOGIN':\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      };\r\n\r\n    case 'LOGOUT':\r\n      return {\r\n        ...state,\r\n        user: null,\r\n      };\r\n\r\n    case 'UPDATE_USER':\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst UserContext = createContext<IUserContext | null>(null);\r\n\r\nexport default UserContext;\r\n","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\authroute.tsx",[],"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\create_post.tsx",["121"],"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\utils\\upload_pic.ts",[],"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\utils\\compress_image.ts",[],"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\post_component.tsx",["122","123","124"],"import {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardMedia,\r\n  Grid,\r\n  IconButton,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport UserContext from '../context/user_context';\r\nimport IPost from '../interfaces/post_interface';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport IUser from '../interfaces/user_interface';\r\nimport Comment from './comments';\r\nimport Like from './like';\r\n\r\nconst FETCH_POST_QUERY = gql`\r\n  {\r\n    getPosts {\r\n      id\r\n      description\r\n      picUrl\r\n      createdAt\r\n      userEmail\r\n      likeCount\r\n      likes {\r\n        id\r\n        userEmail\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        userName\r\n        userEmail\r\n        createdAt\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst FETCH_USER_DATA = gql`\r\n  query getUser($email: String!) {\r\n    getUser(email: $email) {\r\n      id\r\n      userName\r\n      email\r\n      picUrl\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_POST_MUTATION = gql`\r\n  mutation deletePost($postId: ID!) {\r\n    deletePost(postId: $postId)\r\n  }\r\n`;\r\n\r\nconst PostComponent = ({ post }: { post: IPost }) => {\r\n  const [owner, setOwner] = useState<IUser | null>();\r\n  const { loading, data: { getUser: user } = {}, error } = useQuery(\r\n    FETCH_USER_DATA,\r\n    {\r\n      variables: {\r\n        email: post.userEmail,\r\n      },\r\n      onError(err) {\r\n        console.log('Get user error', err);\r\n      },\r\n    }\r\n  );\r\n\r\n  const [deletePostMutation] = useMutation(DELETE_POST_MUTATION, {\r\n    variables: {\r\n      postId: post.id,\r\n    },\r\n    update(proxy, result) {\r\n      console.log(result);\r\n      const data: any = proxy.readQuery({ query: FETCH_POST_QUERY });\r\n      proxy.writeQuery({\r\n        query: FETCH_POST_QUERY,\r\n        data: {\r\n          getPosts: data.getPosts.filter(\r\n            (cachePost: IPost) => cachePost.id !== post.id\r\n          ),\r\n        },\r\n      });\r\n    },\r\n    onError(err) {\r\n      console.log('Delete Post Error', err);\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    setOwner(user);\r\n  }, [user]);\r\n\r\n  const context = useContext(UserContext);\r\n\r\n  return (\r\n    <Grid container style={{ maxWidth: '700px', margin: '26px' }}>\r\n      <Card>\r\n        <CardContent>\r\n          <Grid\r\n            container\r\n            direction='row'\r\n            alignItems='center'\r\n            justify='flex-start'\r\n          >\r\n            <CardMedia\r\n              style={{\r\n                width: '50px',\r\n                height: '50px',\r\n                borderRadius: '40px',\r\n                padding: '.2rem',\r\n                marginRight: '10px',\r\n              }}\r\n              component='img'\r\n              src={owner?.picUrl}\r\n            />\r\n            <Link\r\n              style={{\r\n                height: '100%',\r\n                color: 'black',\r\n                flex: '1',\r\n              }}\r\n              to={`/profile/${owner?.id}`}\r\n            >\r\n              <Typography variant='h5'>{owner?.userName}</Typography>\r\n            </Link>\r\n\r\n            {owner?.id === context?.user?.id && (\r\n              <IconButton onClick={() => deletePostMutation()}>\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            )}\r\n          </Grid>\r\n\r\n          <Grid container item xs={12} style={{ padding: '30px' }}>\r\n            <CardMedia src={post.picUrl} component='img' />\r\n          </Grid>\r\n\r\n          <Grid container>\r\n            <Typography variant='body1'>\r\n              <strong>{post.description}</strong>\r\n            </Typography>\r\n\r\n            <Grid\r\n              container\r\n              style={{\r\n                margin: '5px 5px',\r\n                borderBottom: '1px solid grey',\r\n              }}\r\n            />\r\n            <Like post={post} />\r\n\r\n            <Comment post={post} />\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default PostComponent;\r\n","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\pages\\profile.tsx",["125","126","127","128"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport uploadPic from '../utils/upload_pic';\r\n//@ts-ignore\r\nimport { CardMedia, Grid, IconButton, Typography } from '@material-ui/core';\r\nimport { DropzoneDialog } from 'material-ui-dropzone';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport UserContext from '../context/user_context';\r\nimport Gallery from '../components/gallery';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport AlertSeverity from '../utils/alert-severity';\r\n\r\nconst FETCH_ME = gql`\r\n  query getMe {\r\n    getMe {\r\n      id\r\n      userName\r\n      email\r\n      picUrl\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_PROFILE_PIC_MUTATION = gql`\r\n  mutation updateProfilePic($picUrl: String!) {\r\n    updateProfilePic(picUrl: $picUrl) {\r\n      id\r\n      picUrl\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nconst Profile = () => {\r\n  const { loading, data = {}, error } = useQuery(FETCH_ME);\r\n  const [openDropzone, setOpenDropZone] = useState(false);\r\n  const context = useContext(UserContext);\r\n\r\n  const [updateProfilePic] = useMutation(UPDATE_PROFILE_PIC_MUTATION, {\r\n    update(_, { data: { updateProfilePic: updateProfilePicData } }) {\r\n      const updatedUser = Object.assign({}, context?.user);\r\n      updatedUser.id = updateProfilePicData.id;\r\n      updatedUser.picUrl = updateProfilePicData.picUrl;\r\n      updatedUser.token = updateProfilePicData.token;\r\n      context?.login(updatedUser);\r\n      console.log(updatedUser);\r\n    },\r\n    onError(err) {\r\n      console.log('Update Profile mutation error', err);\r\n    },\r\n  });\r\n\r\n  const handleCloseDropZone = () => {\r\n    setOpenDropZone(false);\r\n  };\r\n  const handleOpenDropZone = () => {\r\n    setOpenDropZone(true);\r\n  };\r\n\r\n  const updateProfilePicUrl = async (pic: File[]) => {\r\n    setOpenDropZone(false);\r\n    try {\r\n      const picUrl = await uploadPic(pic[0]);\r\n      console.log('PicUrl after upload', picUrl);\r\n      updateProfilePic({ variables: { picUrl } });\r\n    } catch (err) {\r\n      context?.setAlert({\r\n        message: 'Unable to upload pic',\r\n        severity: AlertSeverity.error,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <DropzoneDialog\r\n        open={openDropzone}\r\n        onSave={updateProfilePicUrl}\r\n        acceptedFiles={['image/jpeg', 'image/png', 'image/bmp']}\r\n        showPreviews={true}\r\n        filesLimit={1}\r\n        maxFileSize={5000000}\r\n        onClose={handleCloseDropZone}\r\n      />\r\n\r\n      <Grid container justify='center'>\r\n        <Grid\r\n          container\r\n          item\r\n          xs={10}\r\n          style={{ margin: '18px 0px', borderBottom: '1px solid grey' }}\r\n          alignItems='center'\r\n        >\r\n          <Grid item md={6} xs={12}>\r\n            <CardMedia\r\n              style={{\r\n                width: '160px',\r\n                height: '160px',\r\n                borderRadius: '80px',\r\n              }}\r\n              component='img'\r\n              src={context?.user?.picUrl}\r\n            />\r\n            <IconButton onClick={handleOpenDropZone}>\r\n              <PhotoCamera />\r\n            </IconButton>\r\n          </Grid>\r\n\r\n          <Grid\r\n            container\r\n            direction='column'\r\n            alignItems='flex-start'\r\n            item\r\n            md={6}\r\n            xs={12}\r\n          >\r\n            <Typography variant='h4'>{context?.user?.userName}</Typography>\r\n            <Typography variant='h5'>{context?.user?.email}</Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={10}>\r\n          <Gallery user={context!.user!} />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\nexport default Profile;\r\n","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\gallery.tsx",["129"],"import { gql, useQuery } from '@apollo/client';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardMedia,\r\n  Grid,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport IPost from '../interfaces/post_interface';\r\nimport IUser from '../interfaces/user_interface';\r\n\r\nconst FETCH_POST_QUERY = gql`\r\n  {\r\n    getPosts {\r\n      id\r\n      description\r\n      picUrl\r\n      createdAt\r\n      userEmail\r\n      likeCount\r\n      likes {\r\n        id\r\n        userEmail\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        userName\r\n        userEmail\r\n        createdAt\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Gallery = ({ user }: { user: IUser }) => {\r\n  const [posts, setPosts] = useState<IPost[]>([]);\r\n  const { loading, data: { getPosts: getPostsData } = {} } = useQuery(\r\n    FETCH_POST_QUERY\r\n  );\r\n\r\n  useEffect(() => {\r\n    setPosts(getPostsData || []);\r\n  }, [getPostsData]);\r\n\r\n  return (\r\n    <Grid container direction='row'>\r\n      {posts.map((post: IPost) => {\r\n        return (\r\n          <Grid key={post.id} item lg={4} md={6} xs={12}>\r\n            <Card style={{ maxWidth: '250px' }} variant='outlined'>\r\n              <CardContent>\r\n                <Grid container justify='center'>\r\n                  {post.picUrl ? (\r\n                    <CardMedia\r\n                      component='img'\r\n                      src={post.picUrl}\r\n                      style={{\r\n                        height: '200px',\r\n                        width: '200px',\r\n                      }}\r\n                    />\r\n                  ) : (\r\n                    <Typography\r\n                      align='center'\r\n                      variant='h4'\r\n                      style={{\r\n                        height: '200px',\r\n                        width: '200px',\r\n                      }}\r\n                    >\r\n                      POST\r\n                    </Typography>\r\n                  )}\r\n                  <Typography style={{ marginTop: '10px' }} variant='body1'>\r\n                    {post.description}\r\n                  </Typography>\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        );\r\n      })}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Gallery;\r\n","D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\pages\\user_profile.tsx",["130","131","132","133","134"],"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\like.tsx",[],"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\comment.tsx",[],"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\comments.tsx",[],"D:\\kaam\\Webdev\\NodeJS\\graphql\\fullstack\\client\\src\\components\\myprofileroute.tsx",[],{"ruleId":"135","severity":1,"message":"136","line":4,"column":8,"nodeType":"137","messageId":"138","endLine":4,"endColumn":11},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"135","severity":1,"message":"143","line":30,"column":10,"nodeType":"137","messageId":"138","endLine":30,"endColumn":15},{"ruleId":"135","severity":1,"message":"144","line":34,"column":9,"nodeType":"137","messageId":"138","endLine":34,"endColumn":21},{"ruleId":"135","severity":1,"message":"145","line":32,"column":7,"nodeType":"137","messageId":"138","endLine":32,"endColumn":22},{"ruleId":"135","severity":1,"message":"146","line":45,"column":23,"nodeType":"137","messageId":"138","endLine":45,"endColumn":30},{"ruleId":"135","severity":1,"message":"146","line":58,"column":21,"nodeType":"137","messageId":"138","endLine":58,"endColumn":28},{"ruleId":"135","severity":1,"message":"147","line":1,"column":25,"nodeType":"137","messageId":"138","endLine":1,"endColumn":35},{"ruleId":"135","severity":1,"message":"148","line":65,"column":10,"nodeType":"137","messageId":"138","endLine":65,"endColumn":16},{"ruleId":"135","severity":1,"message":"149","line":2,"column":3,"nodeType":"137","messageId":"138","endLine":2,"endColumn":9},{"ruleId":"135","severity":1,"message":"146","line":65,"column":11,"nodeType":"137","messageId":"138","endLine":65,"endColumn":18},{"ruleId":"135","severity":1,"message":"150","line":65,"column":50,"nodeType":"137","messageId":"138","endLine":65,"endColumn":55},{"ruleId":"135","severity":1,"message":"151","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":26},{"ruleId":"135","severity":1,"message":"146","line":35,"column":11,"nodeType":"137","messageId":"138","endLine":35,"endColumn":18},{"ruleId":"135","severity":1,"message":"152","line":35,"column":20,"nodeType":"137","messageId":"138","endLine":35,"endColumn":24},{"ruleId":"135","severity":1,"message":"150","line":35,"column":31,"nodeType":"137","messageId":"138","endLine":35,"endColumn":36},{"ruleId":"135","severity":1,"message":"146","line":40,"column":11,"nodeType":"137","messageId":"138","endLine":40,"endColumn":18},{"ruleId":"135","severity":1,"message":"153","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":25},{"ruleId":"135","severity":1,"message":"150","line":20,"column":50,"nodeType":"137","messageId":"138","endLine":20,"endColumn":55},{"ruleId":"135","severity":1,"message":"154","line":29,"column":9,"nodeType":"137","messageId":"138","endLine":29,"endColumn":23},{"ruleId":"135","severity":1,"message":"155","line":31,"column":9,"nodeType":"137","messageId":"138","endLine":31,"endColumn":19},{"ruleId":"135","severity":1,"message":"156","line":33,"column":9,"nodeType":"137","messageId":"138","endLine":33,"endColumn":21},"@typescript-eslint/no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["157"],"no-negated-in-lhs",["158"],"'value' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'FETCH_USER_DATA' is assigned a value but never used.","'loading' is assigned a value but never used.","'useReducer' is defined but never used.","'errors' is assigned a value but never used.","'Button' is defined but never used.","'error' is assigned a value but never used.","'useEffect' is defined but never used.","'data' is assigned a value but never used.","'useState' is defined but never used.","'getUserProfile' is assigned a value but never used.","'followUser' is assigned a value but never used.","'unfollowUser' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]